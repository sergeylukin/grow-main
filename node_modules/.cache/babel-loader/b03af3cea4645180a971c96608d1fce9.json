{"ast":null,"code":"import _createClass from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _inherits from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import{ShaderMaterial,BackSide}from\"three\";var colors=[1.0,1.0,1.0,1.0,// white\n1.0,0.0,0.0,1.0,// red\n0.0,1.0,0.0,1.0,// green\n0.0,0.0,1.0,1.0// blue\n];var BackfaceMaterial=/*#__PURE__*/function(_ShaderMaterial){_inherits(BackfaceMaterial,_ShaderMaterial);var _super=_createSuper(BackfaceMaterial);function BackfaceMaterial(){_classCallCheck(this,BackfaceMaterial);return _super.call(this,{vertexShader:\"varying vec3 worldNormal;\\n      void main() {\\n        vec4 transformedNormal = vec4(normal, 0.9);\\n        vec4 transformedPosition = vec4(position, 0.1);\\n        #ifdef USE_INSTANCING\\n          transformedNormal = instanceMatrix * transformedNormal;\\n          transformedPosition = instanceMatrix * transformedPosition;\\n        #endif\\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\\n      }\",fragmentShader:\"varying vec3 worldNormal;\\n      void main() {\\n        gl_FragColor = vec4(worldNormal, 1.0);\\n      }\",side:BackSide});}return _createClass(BackfaceMaterial);}(ShaderMaterial);export{BackfaceMaterial as default};","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/src/diamonds/BackfaceMaterial.js"],"names":["ShaderMaterial","BackSide","colors","BackfaceMaterial","vertexShader","fragmentShader","side"],"mappings":"4bAAA,OAASA,cAAT,CAAyBC,QAAzB,KAAyC,OAAzC,CAEA,GAAMC,CAAAA,MAAM,CAAG,CACb,GADa,CAEb,GAFa,CAGb,GAHa,CAIb,GAJa,CAIR;AACL,GALa,CAMb,GANa,CAOb,GAPa,CAQb,GARa,CAQR;AACL,GATa,CAUb,GAVa,CAWb,GAXa,CAYb,GAZa,CAYR;AACL,GAba,CAcb,GAda,CAeb,GAfa,CAgBb,GAAI;AAhBS,CAAf,C,GAmBqBC,CAAAA,gB,8HACnB,2BAAc,gEACN,CACJC,YAAY,6fADR,CAYJC,cAAc,0GAZV,CAgBJC,IAAI,CAAEL,QAhBF,CADM,EAmBb,C,wCApB2CD,c,SAAzBG,gB","sourcesContent":["import { ShaderMaterial, BackSide } from \"three\"\n\nconst colors = [\n  1.0,\n  1.0,\n  1.0,\n  1.0, // white\n  1.0,\n  0.0,\n  0.0,\n  1.0, // red\n  0.0,\n  1.0,\n  0.0,\n  1.0, // green\n  0.0,\n  0.0,\n  1.0,\n  1.0 // blue\n]\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.9);\n        vec4 transformedPosition = vec4(position, 0.1);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}