{"ast":null,"code":"import _createClass from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderMaterial, BackSide } from \"three\";\nvar colors = [1.0, 1.0, 1.0, 1.0, // white\n1.0, 0.0, 0.0, 1.0, // red\n0.0, 1.0, 0.0, 1.0, // green\n0.0, 0.0, 1.0, 1.0 // blue\n];\n\nvar BackfaceMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(BackfaceMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(BackfaceMaterial);\n\n  function BackfaceMaterial() {\n    _classCallCheck(this, BackfaceMaterial);\n\n    return _super.call(this, {\n      vertexShader: \"varying vec3 worldNormal;\\n      void main() {\\n        vec4 transformedNormal = vec4(normal, 0.9);\\n        vec4 transformedPosition = vec4(position, 0.1);\\n        #ifdef USE_INSTANCING\\n          transformedNormal = instanceMatrix * transformedNormal;\\n          transformedPosition = instanceMatrix * transformedPosition;\\n        #endif\\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\\n      }\",\n      fragmentShader: \"varying vec3 worldNormal;\\n      void main() {\\n        gl_FragColor = vec4(worldNormal, 1.0);\\n      }\",\n      side: BackSide\n    });\n  }\n\n  return _createClass(BackfaceMaterial);\n}(ShaderMaterial);\n\nexport { BackfaceMaterial as default };","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/src/diamonds/BackfaceMaterial.js"],"names":["ShaderMaterial","BackSide","colors","BackfaceMaterial","vertexShader","fragmentShader","side"],"mappings":";;;;AAAA,SAASA,cAAT,EAAyBC,QAAzB,QAAyC,OAAzC;AAEA,IAAMC,MAAM,GAAG,CACb,GADa,EAEb,GAFa,EAGb,GAHa,EAIb,GAJa,EAIR;AACL,GALa,EAMb,GANa,EAOb,GAPa,EAQb,GARa,EAQR;AACL,GATa,EAUb,GAVa,EAWb,GAXa,EAYb,GAZa,EAYR;AACL,GAba,EAcb,GAda,EAeb,GAfa,EAgBb,GAhBa,CAgBT;AAhBS,CAAf;;IAmBqBC,gB;;;;;AACnB,8BAAc;AAAA;;AAAA,6BACN;AACJC,MAAAA,YAAY,8fADR;AAYJC,MAAAA,cAAc,2GAZV;AAgBJC,MAAAA,IAAI,EAAEL;AAhBF,KADM;AAmBb;;;EApB2CD,c;;SAAzBG,gB","sourcesContent":["import { ShaderMaterial, BackSide } from \"three\"\n\nconst colors = [\n  1.0,\n  1.0,\n  1.0,\n  1.0, // white\n  1.0,\n  0.0,\n  0.0,\n  1.0, // red\n  0.0,\n  1.0,\n  0.0,\n  1.0, // green\n  0.0,\n  0.0,\n  1.0,\n  1.0 // blue\n]\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.9);\n        vec4 transformedPosition = vec4(position, 0.1);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}