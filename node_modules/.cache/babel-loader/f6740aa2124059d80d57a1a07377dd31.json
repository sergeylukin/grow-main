{"ast":null,"code":"import _objectSpread from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"color\", \"shift\", \"opacity\", \"args\", \"map\"];\n\nvar _jsxFileName = \"/Users/sergey/code/grow/pres2/src/components/Plane.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { forwardRef, useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport lerp from \"lerp\";\nimport \"./CustomMaterial\";\nimport { useBlock } from \"../blocks\";\nimport state from \"../store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Plane = /*#__PURE__*/forwardRef(_c = _s(function (_ref, ref) {\n  _s();\n\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"white\" : _ref$color,\n      _ref$shift = _ref.shift,\n      shift = _ref$shift === void 0 ? 1 : _ref$shift,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      args = _ref.args,\n      map = _ref.map,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useBlock = useBlock(),\n      viewportHeight = _useBlock.viewportHeight,\n      offsetFactor = _useBlock.offsetFactor;\n\n  var material = useRef();\n  var last = state.top.current;\n  useFrame(function () {\n    var pages = state.pages,\n        top = state.top;\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1);\n    material.current.shift = lerp(material.current.shift, (top.current - last) / shift * 1.5, 0.1);\n    last = top.current;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread({\n    ref: ref\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, _this);\n}, \"Os4LXybcjB2+oFq505i3NX5cUfI=\", false, function () {\n  return [useBlock, useFrame];\n}));\n_c2 = Plane;\nexport default Plane;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plane$forwardRef\");\n$RefreshReg$(_c2, \"Plane\");","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/src/components/Plane.js"],"names":["React","forwardRef","useRef","useFrame","lerp","useBlock","state","Plane","ref","color","shift","opacity","args","map","props","viewportHeight","offsetFactor","material","last","top","current","pages","scale"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,MAA5B,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,kBAAP;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,IAAMC,KAAK,gBAAGN,UAAU,SAAC,gBAAmEO,GAAnE,EAA2E;AAAA;;AAAA,wBAAxEC,KAAwE;AAAA,MAAxEA,KAAwE,2BAAhE,OAAgE;AAAA,wBAAvDC,KAAuD;AAAA,MAAvDA,KAAuD,2BAA/C,CAA+C;AAAA,0BAA5CC,OAA4C;AAAA,MAA5CA,OAA4C,6BAAlC,CAAkC;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,GAAyB,QAAzBA,GAAyB;AAAA,MAAjBC,KAAiB;;AAClG,kBAAyCT,QAAQ,EAAjD;AAAA,MAAQU,cAAR,aAAQA,cAAR;AAAA,MAAwBC,YAAxB,aAAwBA,YAAxB;;AACA,MAAMC,QAAQ,GAAGf,MAAM,EAAvB;AACA,MAAIgB,IAAI,GAAGZ,KAAK,CAACa,GAAN,CAAUC,OAArB;AACAjB,EAAAA,QAAQ,CAAC,YAAM;AACb,QAAQkB,KAAR,GAAuBf,KAAvB,CAAQe,KAAR;AAAA,QAAeF,GAAf,GAAuBb,KAAvB,CAAea,GAAf;AACAF,IAAAA,QAAQ,CAACG,OAAT,CAAiBE,KAAjB,GAAyBlB,IAAI,CAACa,QAAQ,CAACG,OAAT,CAAiBE,KAAlB,EAAyBN,YAAY,GAAGG,GAAG,CAACC,OAAJ,IAAe,CAACC,KAAK,GAAG,CAAT,IAAcN,cAA7B,CAAxC,EAAsF,GAAtF,CAA7B;AACAE,IAAAA,QAAQ,CAACG,OAAT,CAAiBV,KAAjB,GAAyBN,IAAI,CAACa,QAAQ,CAACG,OAAT,CAAiBV,KAAlB,EAA0B,CAACS,GAAG,CAACC,OAAJ,GAAcF,IAAf,IAAuBR,KAAxB,GAAiC,GAA1D,EAA+D,GAA/D,CAA7B;AACAQ,IAAAA,IAAI,GAAGC,GAAG,CAACC,OAAX;AACD,GALO,CAAR;AAMA,sBAAO;AAAM,IAAA,GAAG,EAAEZ;AAAX,KAAoBM,KAApB;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAXuB;AAAA,UACmBT,QADnB,EAItBF,QAJsB;AAAA,GAAxB;MAAMI,K;AAaN,eAAeA,KAAf","sourcesContent":["import React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport lerp from \"lerp\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst Plane = forwardRef(({ color = \"white\", shift = 1, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, ((top.current - last) / shift) * 1.5, 0.1)\n    last = top.current\n  })\n  return <mesh ref={ref} {...props}></mesh>\n})\n\nexport default Plane\n"]},"metadata":{},"sourceType":"module"}