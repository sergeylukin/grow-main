{"ast":null,"code":"import _defineProperty from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { ShaderMaterial, UniformsUtils } from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  return /*#__PURE__*/function (_ShaderMaterial) {\n    _inherits(_class, _ShaderMaterial);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      var _this;\n\n      _classCallCheck(this, _class);\n\n      var entries = Object.entries(uniforms); // Create unforms and shaders\n\n      _this = _super.call(this, {\n        uniforms: entries.reduce(function (acc, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              name = _ref2[0],\n              value = _ref2[1];\n\n          var uniform = UniformsUtils.clone(_defineProperty({}, name, {\n            value: value\n          }));\n          return _extends({}, acc, uniform);\n        }, {}),\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            name = _ref4[0];\n\n        return Object.defineProperty(_assertThisInitialized(_this), name, {\n          get: function get() {\n            return _this.uniforms[name].value;\n          },\n          set: function set(v) {\n            return _this.uniforms[name].value = v;\n          }\n        });\n      });\n      if (onInit) onInit(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    return _createClass(_class);\n  }(ShaderMaterial);\n}\n\nexport { shaderMaterial };","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/node_modules/@react-three/drei/core/shaderMaterial.js"],"names":["_extends","ShaderMaterial","UniformsUtils","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","entries","Object","reduce","acc","name","value","uniform","clone","forEach","defineProperty","get","set","v"],"mappings":";;;;;;;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,OAA9C;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,MAAhE,EAAwE;AACtE;AAAA;;AAAA;;AACE,sBAAc;AAAA;;AAAA;;AACZ,UAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeJ,QAAf,CAAhB,CADY,CAC8B;;AAE1C,gCAAM;AACJA,QAAAA,QAAQ,EAAEI,OAAO,CAACE,MAAR,CAAe,UAACC,GAAD,QAAwB;AAAA;AAAA,cAAjBC,IAAiB;AAAA,cAAXC,KAAW;;AAC/C,cAAMC,OAAO,GAAGZ,aAAa,CAACa,KAAd,qBACbH,IADa,EACN;AACNC,YAAAA,KAAK,EAALA;AADM,WADM,EAAhB;AAKA,iBAAOb,QAAQ,CAAC,EAAD,EAAKW,GAAL,EAAUG,OAAV,CAAf;AACD,SAPS,EAOP,EAPO,CADN;AASJT,QAAAA,YAAY,EAAZA,YATI;AAUJC,QAAAA,cAAc,EAAdA;AAVI,OAAN,EAHY,CAcR;;AAEJE,MAAAA,OAAO,CAACQ,OAAR,CAAgB;AAAA;AAAA,YAAEJ,IAAF;;AAAA,eAAYH,MAAM,CAACQ,cAAP,gCAA4BL,IAA5B,EAAkC;AAC5DM,UAAAA,GAAG,EAAE;AAAA,mBAAM,MAAKd,QAAL,CAAcQ,IAAd,EAAoBC,KAA1B;AAAA,WADuD;AAE5DM,UAAAA,GAAG,EAAE,aAAAC,CAAC;AAAA,mBAAI,MAAKhB,QAAL,CAAcQ,IAAd,EAAoBC,KAApB,GAA4BO,CAAhC;AAAA;AAFsD,SAAlC,CAAZ;AAAA,OAAhB;AAIA,UAAIb,MAAJ,EAAYA,MAAM,+BAAN;AApBA;AAqBb;;AAtBH;AAAA,IAAqBN,cAArB;AAyBD;;AAED,SAASE,cAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { ShaderMaterial, UniformsUtils } from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  return class extends ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return _extends({}, acc, uniform);\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n}\n\nexport { shaderMaterial };\n"]},"metadata":{},"sourceType":"module"}