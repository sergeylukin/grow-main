{"ast":null,"code":"import _objectSpread from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"size\", \"left\", \"right\", \"top\", \"bottom\", \"color\", \"opacity\", \"height\", \"layers\", \"font\"],\n    _excluded2 = [\"text\", \"size\", \"lineHeight\", \"position\"];\n\nvar _jsxFileName = \"/Users/sergey/code/grow/pres2/src/components/Text.js\",\n    _s = $RefreshSig$(),\n    _this = this;\n\nimport { FontLoader, Vector3, TextBufferGeometry } from \"three\";\nimport React, { useCallback, useRef } from \"react\";\nimport { useLoader, useFrame } from \"@react-three/fiber\";\nimport { useAsset } from \"use-asset\";\nimport lerp from \"lerp\";\nimport state from \"../store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Text(_ref) {\n  _s();\n\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 1 : _ref$size,\n      left = _ref.left,\n      right = _ref.right,\n      top = _ref.top,\n      bottom = _ref.bottom,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"white\" : _ref$color,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 0.01 : _ref$height,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? 0 : _ref$layers,\n      _ref$font = _ref.font,\n      font = _ref$font === void 0 ? \"/MOONGET_Heavy.blob\" : _ref$font,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var data = useLoader(FontLoader, font);\n  var geom = useAsset(function () {\n    return new Promise(function (res) {\n      return res(new TextBufferGeometry(children, {\n        font: data,\n        size: 1,\n        height: height,\n        curveSegments: 32\n      }));\n    });\n  }, [children]);\n  var onUpdate = useCallback(function (self) {\n    var box = new Vector3();\n    self.geometry.computeBoundingBox();\n    self.geometry.boundingBox.getSize(box);\n    self.position.x = left ? 0 : right ? -box.x : -box.x / 2;\n    self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2;\n  }, [left, right, top, bottom]);\n  var ref = useRef();\n  var last = state.top.current;\n  useFrame(function () {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1);\n    last = state.top.current;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({}, props), {}, {\n    scale: [size, size, 0.1],\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: geom,\n      onUpdate: onUpdate,\n      frustumCulled: false,\n      children: /*#__PURE__*/_jsxDEV(\"customMaterial\", {\n        ref: ref,\n        color: color,\n        transparent: true,\n        opacity: opacity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Text, \"N4iE/5CFlGYy1TDN2h45yeq6DB4=\", false, function () {\n  return [useLoader, useAsset, useFrame];\n});\n\n_c = Text;\n\nvar MultilineText = function MultilineText(_ref2) {\n  var text = _ref2.text,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 1 : _ref2$size,\n      _ref2$lineHeight = _ref2.lineHeight,\n      lineHeight = _ref2$lineHeight === void 0 ? 1 : _ref2$lineHeight,\n      _ref2$position = _ref2.position,\n      position = _ref2$position === void 0 ? [0, 0, 0] : _ref2$position,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  return text.split(\"\\n\").map(function (text, index) {\n    return /*#__PURE__*/_jsxDEV(Text, _objectSpread(_objectSpread({\n      size: size\n    }, props), {}, {\n      position: [position[0], position[1] - index * lineHeight, position[2]],\n      children: text\n    }), index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 41\n    }, _this);\n  });\n};\n\n_c2 = MultilineText;\nexport { Text, MultilineText };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Text\");\n$RefreshReg$(_c2, \"MultilineText\");","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/src/components/Text.js"],"names":["FontLoader","Vector3","TextBufferGeometry","React","useCallback","useRef","useLoader","useFrame","useAsset","lerp","state","Text","children","size","left","right","top","bottom","color","opacity","height","layers","font","props","data","geom","Promise","res","curveSegments","onUpdate","self","box","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","ref","last","current","shift","MultilineText","text","lineHeight","split","map","index"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,kBAA9B,QAAwD,OAAxD;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;AAEA,SAASC,IAAT,OAAiK;AAAA;;AAAA,MAAjJC,QAAiJ,QAAjJA,QAAiJ;AAAA,uBAAvIC,IAAuI;AAAA,MAAvIA,IAAuI,0BAAhI,CAAgI;AAAA,MAA7HC,IAA6H,QAA7HA,IAA6H;AAAA,MAAvHC,KAAuH,QAAvHA,KAAuH;AAAA,MAAhHC,GAAgH,QAAhHA,GAAgH;AAAA,MAA3GC,MAA2G,QAA3GA,MAA2G;AAAA,wBAAnGC,KAAmG;AAAA,MAAnGA,KAAmG,2BAA3F,OAA2F;AAAA,0BAAlFC,OAAkF;AAAA,MAAlFA,OAAkF,6BAAxE,CAAwE;AAAA,yBAArEC,MAAqE;AAAA,MAArEA,MAAqE,4BAA5D,IAA4D;AAAA,yBAAtDC,MAAsD;AAAA,MAAtDA,MAAsD,4BAA7C,CAA6C;AAAA,uBAA1CC,IAA0C;AAAA,MAA1CA,IAA0C,0BAAnC,qBAAmC;AAAA,MAATC,KAAS;;AAC/J,MAAMC,IAAI,GAAGlB,SAAS,CAACN,UAAD,EAAasB,IAAb,CAAtB;AACA,MAAMG,IAAI,GAAGjB,QAAQ,CAAC;AAAA,WAAM,IAAIkB,OAAJ,CAAY,UAACC,GAAD;AAAA,aAASA,GAAG,CAAC,IAAIzB,kBAAJ,CAAuBU,QAAvB,EAAiC;AAAEU,QAAAA,IAAI,EAAEE,IAAR;AAAcX,QAAAA,IAAI,EAAE,CAApB;AAAuBO,QAAAA,MAAM,EAANA,MAAvB;AAA+BQ,QAAAA,aAAa,EAAE;AAA9C,OAAjC,CAAD,CAAZ;AAAA,KAAZ,CAAN;AAAA,GAAD,EAAwH,CAAChB,QAAD,CAAxH,CAArB;AACA,MAAMiB,QAAQ,GAAGzB,WAAW,CAC1B,UAAC0B,IAAD,EAAU;AACR,QAAMC,GAAG,GAAG,IAAI9B,OAAJ,EAAZ;AACA6B,IAAAA,IAAI,CAACE,QAAL,CAAcC,kBAAd;AACAH,IAAAA,IAAI,CAACE,QAAL,CAAcE,WAAd,CAA0BC,OAA1B,CAAkCJ,GAAlC;AACAD,IAAAA,IAAI,CAACM,QAAL,CAAcC,CAAd,GAAkBvB,IAAI,GAAG,CAAH,GAAOC,KAAK,GAAG,CAACgB,GAAG,CAACM,CAAR,GAAY,CAACN,GAAG,CAACM,CAAL,GAAS,CAAvD;AACAP,IAAAA,IAAI,CAACM,QAAL,CAAcE,CAAd,GAAkBtB,GAAG,GAAG,CAAH,GAAOC,MAAM,GAAG,CAACc,GAAG,CAACO,CAAR,GAAY,CAACP,GAAG,CAACO,CAAL,GAAS,CAAvD;AACD,GAPyB,EAQ1B,CAACxB,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAmBC,MAAnB,CAR0B,CAA5B;AAWA,MAAMsB,GAAG,GAAGlC,MAAM,EAAlB;AACA,MAAImC,IAAI,GAAG9B,KAAK,CAACM,GAAN,CAAUyB,OAArB;AACAlC,EAAAA,QAAQ,CAAC,YAAM;AACbgC,IAAAA,GAAG,CAACE,OAAJ,CAAYC,KAAZ,GAAoBjC,IAAI,CAAC8B,GAAG,CAACE,OAAJ,CAAYC,KAAb,EAAoB,CAAChC,KAAK,CAACM,GAAN,CAAUyB,OAAV,GAAoBD,IAArB,IAA6B,GAAjD,EAAsD,GAAtD,CAAxB;AACAA,IAAAA,IAAI,GAAG9B,KAAK,CAACM,GAAN,CAAUyB,OAAjB;AACD,GAHO,CAAR;AAKA,sBACE,iDAAWlB,KAAX;AAAkB,IAAA,KAAK,EAAE,CAACV,IAAD,EAAOA,IAAP,EAAa,GAAb,CAAzB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEY,IAAhB;AAAsB,MAAA,QAAQ,EAAEI,QAAhC;AAA0C,MAAA,aAAa,EAAE,KAAzD;AAAA,6BACE;AAAgB,QAAA,GAAG,EAAEU,GAArB;AAA0B,QAAA,KAAK,EAAErB,KAAjC;AAAwC,QAAA,WAAW,MAAnD;AAAoD,QAAA,OAAO,EAAEC;AAA7D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA5BQR,I;UACML,S,EACAE,Q,EAcbD,Q;;;KAhBOI,I;;AA8BT,IAAMgC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,IAAH,SAAGA,IAAH;AAAA,yBAAS/B,IAAT;AAAA,MAASA,IAAT,2BAAgB,CAAhB;AAAA,+BAAmBgC,UAAnB;AAAA,MAAmBA,UAAnB,iCAAgC,CAAhC;AAAA,6BAAmCT,QAAnC;AAAA,MAAmCA,QAAnC,+BAA8C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA9C;AAAA,MAA4Db,KAA5D;;AAAA,SACpBqB,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBC,GAAjB,CAAqB,UAACH,IAAD,EAAOI,KAAP;AAAA,wBAAiB,QAAC,IAAD;AAAkB,MAAA,IAAI,EAAEnC;AAAxB,OAAkCU,KAAlC;AAAyC,MAAA,QAAQ,EAAE,CAACa,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAR,GAAcY,KAAK,GAAGH,UAApC,EAAgDT,QAAQ,CAAC,CAAD,CAAxD,CAAnD;AAAiH,MAAA,QAAQ,EAAEQ;AAA3H,QAAWI,KAAX;AAAA;AAAA;AAAA;AAAA,aAAjB;AAAA,GAArB,CADoB;AAAA,CAAtB;;MAAML,a;AAGN,SAAShC,IAAT,EAAegC,aAAf","sourcesContent":["import { FontLoader, Vector3, TextBufferGeometry } from \"three\"\nimport React, { useCallback, useRef } from \"react\"\nimport { useLoader, useFrame } from \"@react-three/fiber\"\nimport { useAsset } from \"use-asset\"\nimport lerp from \"lerp\"\nimport state from \"../store\"\n\nfunction Text({ children, size = 1, left, right, top, bottom, color = \"white\", opacity = 1, height = 0.01, layers = 0, font = \"/MOONGET_Heavy.blob\", ...props }) {\n  const data = useLoader(FontLoader, font)\n  const geom = useAsset(() => new Promise((res) => res(new TextBufferGeometry(children, { font: data, size: 1, height, curveSegments: 32 }))), [children])\n  const onUpdate = useCallback(\n    (self) => {\n      const box = new Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(box)\n      self.position.x = left ? 0 : right ? -box.x : -box.x / 2\n      self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2\n    },\n    [left, right, top, bottom]\n  )\n\n  const ref = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1)\n    last = state.top.current\n  })\n\n  return (\n    <group {...props} scale={[size, size, 0.1]}>\n      <mesh geometry={geom} onUpdate={onUpdate} frustumCulled={false}>\n        <customMaterial ref={ref} color={color} transparent opacity={opacity} />\n      </mesh>\n    </group>\n  )\n}\n\nconst MultilineText = ({ text, size = 1, lineHeight = 1, position = [0, 0, 0], ...props }) =>\n  text.split(\"\\n\").map((text, index) => <Text key={index} size={size} {...props} position={[position[0], position[1] - index * lineHeight, position[2]]} children={text} />)\n\nexport { Text, MultilineText }\n"]},"metadata":{},"sourceType":"module"}