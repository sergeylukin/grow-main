{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { RestWalker } from \"./rest\";\nimport { cloneArr, drop, dropRight, first as _first, forEach, isEmpty, last } from \"../../utils/utils\";\nimport { first } from \"./first\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"./gast/gast_public\";\n\nvar AbstractNextPossibleTokensWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this) || this;\n\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    } // immutable for the win\n\n\n    this.ruleStack = cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion\n\n    this.occurrenceStack = cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    } // stop scanning once we found the path\n\n\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n\n  return AbstractNextPossibleTokensWalker;\n}(RestWalker);\n\nexport { AbstractNextPossibleTokensWalker };\n\nvar NextAfterTokenWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextAfterTokenWalker, _super);\n\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path) || this;\n\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  };\n\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\n\nexport { NextAfterTokenWalker };\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\n\nvar AbstractNextTerminalAfterProductionWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this) || this;\n\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n\n  return AbstractNextTerminalAfterProductionWalker;\n}(RestWalker);\n\nexport { AbstractNextTerminalAfterProductionWalker };\n\nvar NextTerminalAfterManyWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterMany === undefined;\n\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterManyWalker };\n\nvar NextTerminalAfterManySepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterManySepWalker };\n\nvar NextTerminalAfterAtLeastOneWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterAtLeastOneWalker }; // TODO: reduce code duplication in the AfterWalkers\n\nvar NextTerminalAfterAtLeastOneSepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterAtLeastOneSepWalker };\nexport function possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  } // avoid side effects\n\n\n  currPath = cloneArr(currPath);\n  var result = [];\n  var i = 0; // TODO: avoid inner funcs\n\n  function remainingPathWith(nextDef) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  } // TODO: avoid inner funcs\n\n\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n\n\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      var newDef = prod.definition.concat([new Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      var newDef = [new Alternative({\n        definition: prod.definition\n      }), new Repetition({\n        definition: [new Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new Repetition({\n        definition: [new Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      var newDef = prod.definition.concat([new Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, function (currAlt) {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i)\n  });\n  return result;\n}\nexport function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\"; // to avoid creating a new Array each time.\n\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    var currPath = possiblePaths.pop(); // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && last(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n\n      continue;\n    }\n\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack; // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    var prod = currDef[0];\n    /* istanbul ignore else */\n\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        } // end of the line\n\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      var newRuleStack = cloneArr(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = cloneArr(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE); // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n\n      var nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n\n  return result;\n}\n\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = cloneArr(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = cloneArr(currOccurrenceStack); // top rule is always assumed to have been called with occurrence index 1\n\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"mappings":"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","names":["RestWalker","cloneArr","drop","dropRight","first","_first","forEach","isEmpty","last","Alternation","Alternative","NonTerminal","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","Rule","Terminal","__extends","topProd","path","_super","_this","AbstractNextPossibleTokensWalker","found","ruleStack","name","Error","reverse","occurrenceStack","pop","updateExpectedNext","walk","possibleTokTypes","prod","prevRest","call","refProd","currRest","referencedRule","nextProductionName","idx","nextProductionOccurrence","fullRest","concat","isAtEndOfPath","nextTerminalName","lastTok","nextTerminalOccurrence","lastTokOccurrence","NextAfterTokenWalker","terminal","terminalType","restProd","definition","topRule","occurrence","token","undefined","isEndOfRule","AbstractNextTerminalAfterProductionWalker","result","NextTerminalAfterManyWalker","manyProd","firstAfterMany","walkMany","NextTerminalAfterManySepWalker","manySepProd","firstAfterManySep","walkManySep","NextTerminalAfterAtLeastOneWalker","atLeastOneProd","firstAfterAtLeastOne","walkAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","walkAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","currPath","i","remainingPathWith","nextDef","getAlternativesForProd","alternatives","length","newDef","separator","currAlt","push","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokenVector","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currIdx","currRuleStack","currOccurrenceStack","nextPath","nextIdx","actualToken","nextTokenType","nextTokenOccurrence","newRuleStack","nonTerminalName","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack"],"sourceRoot":"","sources":["../../../../src/parse/grammar/interpreter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}