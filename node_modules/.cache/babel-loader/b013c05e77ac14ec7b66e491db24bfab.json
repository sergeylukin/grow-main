{"ast":null,"code":"import _classCallCheck from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import{ShaderMaterial,Color}from\"three\";import{extend}from\"@react-three/fiber\";var CustomMaterial=/*#__PURE__*/function(_ShaderMaterial){_inherits(CustomMaterial,_ShaderMaterial);var _super=_createSuper(CustomMaterial);function CustomMaterial(){_classCallCheck(this,CustomMaterial);return _super.call(this,{vertexShader:\"uniform float scale;\\n      uniform float shift;\\n      varying vec2 vUv;\\n      void main() {\\n        vec3 pos = position;\\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\\n        vUv = uv;\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n      }\",fragmentShader:\"uniform sampler2D tex;\\n      uniform float hasTexture;\\n      uniform float shift;\\n      uniform float scale;\\n      uniform vec3 color;\\n      uniform float opacity;\\n      varying vec2 vUv;\\n      void main() {\\n        float angle = 1.55;\\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\\n        vec4 cr = texture2D(tex, p + offset);\\n        vec4 cga = texture2D(tex, p);\\n        vec4 cb = texture2D(tex, p - offset);\\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n        else gl_FragColor = vec4(color, opacity);\\n      }\",uniforms:{tex:{value:null},hasTexture:{value:0},scale:{value:0},shift:{value:0},opacity:{value:1},color:{value:new Color(\"white\")}}});}_createClass(CustomMaterial,[{key:\"scale\",get:function get(){return this.uniforms.scale.value;},set:function set(value){this.uniforms.scale.value=value;}},{key:\"shift\",get:function get(){return this.uniforms.shift.value;},set:function set(value){this.uniforms.shift.value=value;}},{key:\"map\",get:function get(){return this.uniforms.tex.value;},set:function set(value){this.uniforms.hasTexture.value=!!value;this.uniforms.tex.value=value;}},{key:\"color\",get:function get(){return this.uniforms.color.value;}},{key:\"opacity\",get:function get(){return this.uniforms.opacity.value;},set:function set(value){if(this.uniforms)this.uniforms.opacity.value=value;}}]);return CustomMaterial;}(ShaderMaterial);extend({CustomMaterial:CustomMaterial});","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/src/components/CustomMaterial.js"],"names":["ShaderMaterial","Color","extend","CustomMaterial","vertexShader","fragmentShader","uniforms","tex","value","hasTexture","scale","shift","opacity","color"],"mappings":"4bAAA,OAASA,cAAT,CAAyBC,KAAzB,KAAsC,OAAtC,CACA,OAASC,MAAT,KAAuB,oBAAvB,C,GAEMC,CAAAA,c,0HACJ,yBAAc,8DACN,CACJC,YAAY,uUADR,CAUJC,cAAc,opBAVV,CA2BJC,QAAQ,CAAE,CACRC,GAAG,CAAE,CAAEC,KAAK,CAAE,IAAT,CADG,CAERC,UAAU,CAAE,CAAED,KAAK,CAAE,CAAT,CAFJ,CAGRE,KAAK,CAAE,CAAEF,KAAK,CAAE,CAAT,CAHC,CAIRG,KAAK,CAAE,CAAEH,KAAK,CAAE,CAAT,CAJC,CAKRI,OAAO,CAAE,CAAEJ,KAAK,CAAE,CAAT,CALD,CAMRK,KAAK,CAAE,CAAEL,KAAK,CAAE,GAAIP,CAAAA,KAAJ,CAAU,OAAV,CAAT,CANC,CA3BN,CADM,EAqCb,C,8CAMD,cAAY,CACV,MAAO,MAAKK,QAAL,CAAcI,KAAd,CAAoBF,KAA3B,CACD,C,KAND,aAAUA,KAAV,CAAiB,CACf,KAAKF,QAAL,CAAcI,KAAd,CAAoBF,KAApB,CAA4BA,KAA5B,CACD,C,mBAUD,cAAY,CACV,MAAO,MAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAA3B,CACD,C,KAND,aAAUA,KAAV,CAAiB,CACf,KAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,CAA4BA,KAA5B,CACD,C,iBAWD,cAAU,CACR,MAAO,MAAKF,QAAL,CAAcC,GAAd,CAAkBC,KAAzB,CACD,C,KAPD,aAAQA,KAAR,CAAe,CACb,KAAKF,QAAL,CAAcG,UAAd,CAAyBD,KAAzB,CAAiC,CAAC,CAACA,KAAnC,CACA,KAAKF,QAAL,CAAcC,GAAd,CAAkBC,KAAlB,CAA0BA,KAA1B,CACD,C,mBAMD,cAAY,CACV,MAAO,MAAKF,QAAL,CAAcO,KAAd,CAAoBL,KAA3B,CACD,C,qBAED,cAAc,CACZ,MAAO,MAAKF,QAAL,CAAcM,OAAd,CAAsBJ,KAA7B,CACD,C,KAED,aAAYA,KAAZ,CAAmB,CACjB,GAAI,KAAKF,QAAT,CAAmB,KAAKA,QAAL,CAAcM,OAAd,CAAsBJ,KAAtB,CAA8BA,KAA9B,CACpB,C,4BA3E0BR,c,EA8E7BE,MAAM,CAAC,CAAEC,cAAc,CAAdA,cAAF,CAAD,CAAN","sourcesContent":["import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"@react-three/fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D tex;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        tex: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.tex.value = value\n  }\n\n  get map() {\n    return this.uniforms.tex.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n"]},"metadata":{},"sourceType":"module"}