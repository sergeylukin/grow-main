{"ast":null,"code":"import { addNoneTerminalToCst, addTerminalToCst, setNodeLocationFull, setNodeLocationOnlyOffset } from \"../../cst/cst\";\nimport { has, isUndefined, keys, NOOP } from \"../../../utils/utils\";\nimport { createBaseSemanticVisitorConstructor, createBaseVisitorConstructorWithDefaults } from \"../../cst/cst_visitor\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * This trait is responsible for the CST building logic.\n */\n\nvar TreeBuilder =\n/** @class */\nfunction () {\n  function TreeBuilder() {}\n\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = []; // outputCst is no longer exposed/defined in the pubic API\n\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\") ? config.nodeLocationTracking : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = NOOP;\n      this.cstFinallyStateUpdate = NOOP;\n      this.cstPostTerminal = NOOP;\n      this.cstPostNonTerminal = NOOP;\n      this.cstPostRule = NOOP;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = NOOP;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = NOOP;\n          this.setNodeLocationFromNode = NOOP;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n          this.cstPostRule = NOOP;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = NOOP;\n          this.setNodeLocationFromNode = NOOP;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = NOOP;\n        this.setNodeLocationFromNode = NOOP;\n        this.cstPostRule = NOOP;\n        this.setInitialNodeLocation = NOOP;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\" + config.nodeLocationTracking + \"\\\"\");\n      }\n    }\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: {}\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return this.baseCstVisitorConstructor;\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n\n  return TreeBuilder;\n}();\n\nexport { TreeBuilder };","map":{"version":3,"mappings":"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","names":["addNoneTerminalToCst","addTerminalToCst","setNodeLocationFull","setNodeLocationOnlyOffset","has","isUndefined","keys","NOOP","createBaseSemanticVisitorConstructor","createBaseVisitorConstructorWithDefaults","DEFAULT_PARSER_CONFIG","TreeBuilder","config","CST_STACK","outputCst","nodeLocationTracking","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","cstPostRule","test","recoveryEnabled","setNodeLocationFromToken","setNodeLocationFromNode","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","Error","cstNode","location","startOffset","NaN","endOffset","LA","startLine","startColumn","endLine","endColumn","nextToken","fullRuleName","shortName","name","children","push","pop","ruleCstNode","prevToken","loc","key","consumedToken","rootCst","length","ruleCstResult","ruleName","preCstNode","baseCstVisitorConstructor","newBaseCstVisitorConstructor","className","gastProductionsCache","baseCstVisitorWithDefaultsConstructor","newConstructor","getBaseCstVisitorConstructor","ruleStack","RULE_STACK","occurrenceStack","RULE_OCCURRENCE_STACK"],"sourceRoot":"","sources":["../../../../../src/parse/parser/traits/tree_builder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}