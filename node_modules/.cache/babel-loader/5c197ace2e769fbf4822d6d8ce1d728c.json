{"ast":null,"code":"import _createClass from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _inherits from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/sergey/code/grow/pres2/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import{ShaderMaterial}from\"three\";var RefractionMaterial=/*#__PURE__*/function(_ShaderMaterial){_inherits(RefractionMaterial,_ShaderMaterial);var _super=_createSuper(RefractionMaterial);function RefractionMaterial(options){_classCallCheck(this,RefractionMaterial);return _super.call(this,{vertexShader:\"varying vec3 worldNormal;\\n      varying vec3 viewDirection;\\n      void main() {\\n        vec4 transformedNormal = vec4(normal, 0.);\\n        vec4 transformedPosition = vec4(position, 1.0);\\n        #ifdef USE_INSTANCING\\n          transformedNormal = instanceMatrix * transformedNormal;\\n          transformedPosition = instanceMatrix * transformedPosition;\\n        #endif\\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\\n      }\",fragmentShader:\"uniform sampler2D envMap;\\n      uniform sampler2D backfaceMap;\\n      uniform vec2 resolution;\\n      varying vec3 worldNormal;\\n      varying vec3 viewDirection;\\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\\n      }\\n      void main() {\\n        vec2 uv = gl_FragCoord.xy / resolution;\\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\\n      }\",uniforms:{envMap:{value:options.envMap},backfaceMap:{value:options.backfaceMap},resolution:{value:options.resolution}}});}return _createClass(RefractionMaterial);}(ShaderMaterial);export{RefractionMaterial as default};","map":{"version":3,"sources":["/Users/sergey/code/grow/pres2/src/diamonds/RefractionMaterial.js"],"names":["ShaderMaterial","RefractionMaterial","options","vertexShader","fragmentShader","uniforms","envMap","value","backfaceMap","resolution"],"mappings":"4bAAA,OAASA,cAAT,KAA+B,OAA/B,C,GAEqBC,CAAAA,kB,kIACnB,4BAAYC,OAAZ,CAAqB,kEACb,CACJC,YAAY,goBADR,CAcJC,cAAc,8vBAdV,CA6BJC,QAAQ,CAAE,CACRC,MAAM,CAAE,CAAEC,KAAK,CAAEL,OAAO,CAACI,MAAjB,CADA,CAERE,WAAW,CAAE,CAAED,KAAK,CAAEL,OAAO,CAACM,WAAjB,CAFL,CAGRC,UAAU,CAAE,CAAEF,KAAK,CAAEL,OAAO,CAACO,UAAjB,CAHJ,CA7BN,CADa,EAoCpB,C,0CArC6CT,c,SAA3BC,kB","sourcesContent":["import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\n      }\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\n      }`,\n      uniforms: {\n        envMap: { value: options.envMap },\n        backfaceMap: { value: options.backfaceMap },\n        resolution: { value: options.resolution }\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}