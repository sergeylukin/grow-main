{"ast":null,"code":"import { analyzeTokenTypes, charCodeToOptimizedIndex, cloneEmptyGroups, DEFAULT_MODE, LineTerminatorOptimizedTester, performRuntimeChecks, performWarningRuntimeChecks, SUPPORT_STICKY, validatePatterns } from \"./lexer\";\nimport { cloneArr, cloneObj, forEach, IDENTITY, isArray, isEmpty, isUndefined, keys, last, map, merge, NOOP, PRINT_WARNING, reduce, reject, timer, toFastProperties } from \"../utils/utils\";\nimport { augmentTokenTypes } from \"./tokens\";\nimport { defaultLexerErrorProvider } from \"../scan/lexer_errors_public\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser\";\nexport var LexerDefinitionErrorType;\n\n(function (LexerDefinitionErrorType) {\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\n\nvar DEFAULT_LEXER_CONFIG = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nvar Lexer =\n/** @class */\nfunction () {\n  function Lexer(lexerDefinition, config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = DEFAULT_LEXER_CONFIG;\n    }\n\n    this.lexerDefinition = lexerDefinition;\n    this.lexerDefinitionErrors = [];\n    this.lexerDefinitionWarning = [];\n    this.patternIdxToConfig = {};\n    this.charCodeToPatternIdxToConfig = {};\n    this.modes = [];\n    this.emptyGroups = {};\n    this.config = undefined;\n    this.trackStartLines = true;\n    this.trackEndLines = true;\n    this.hasCustom = false;\n    this.canModeBeOptimized = {};\n\n    if (typeof config === \"boolean\") {\n      throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n    } // todo: defaults func?\n\n\n    this.config = merge(DEFAULT_LEXER_CONFIG, config);\n    var traceInitVal = this.config.traceInitPerf;\n\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n\n    this.traceInitIndent = -1;\n    this.TRACE_INIT(\"Lexer Constructor\", function () {\n      var actualDefinition;\n      var hasOnlySingleMode = true;\n\n      _this.TRACE_INIT(\"Lexer Config handling\", function () {\n        if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          _this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n            throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n        }\n\n        _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n        _this.trackEndLines = /full/i.test(_this.config.positionTracking); // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: {}\n          };\n          actualDefinition.modes[DEFAULT_MODE] = cloneArr(lexerDefinition);\n          actualDefinition[DEFAULT_MODE] = DEFAULT_MODE;\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = cloneObj(lexerDefinition);\n        }\n      });\n\n      if (_this.config.skipValidations === false) {\n        _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n          _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n\n        _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n          _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n      } // for extra robustness to avoid throwing an none informative error message\n\n\n      actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}; // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n\n      forEach(actualDefinition.modes, function (currModeValue, currModeName) {\n        actualDefinition.modes[currModeName] = reject(currModeValue, function (currTokType) {\n          return isUndefined(currTokType);\n        });\n      });\n      var allModeNames = keys(actualDefinition.modes);\n      forEach(actualDefinition.modes, function (currModDef, currModName) {\n        _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n          _this.modes.push(currModName);\n\n          if (_this.config.skipValidations === false) {\n            _this.TRACE_INIT(\"validatePatterns\", function () {\n              _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n            });\n          } // If definition errors were encountered, the analysis phase may fail unexpectedly/\n          // Considering a lexer with definition errors may never be used, there is no point\n          // to performing the analysis anyhow...\n\n\n          if (isEmpty(_this.lexerDefinitionErrors)) {\n            augmentTokenTypes(currModDef);\n            var currAnalyzeResult_1;\n\n            _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n              currAnalyzeResult_1 = analyzeTokenTypes(currModDef, {\n                lineTerminatorCharacters: _this.config.lineTerminatorCharacters,\n                positionTracking: config.positionTracking,\n                ensureOptimizations: config.ensureOptimizations,\n                safeMode: config.safeMode,\n                tracer: _this.TRACE_INIT.bind(_this)\n              });\n            });\n\n            _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;\n            _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n            _this.emptyGroups = merge(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n            _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n            _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;\n          }\n        });\n      });\n      _this.defaultMode = actualDefinition.defaultMode;\n\n      if (!isEmpty(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {\n        var allErrMessages = map(_this.lexerDefinitionErrors, function (error) {\n          return error.message;\n        });\n        var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      } // Only print warning if there are no errors, This will avoid pl\n\n\n      forEach(_this.lexerDefinitionWarning, function (warningDescriptor) {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          _this.chopInput = IDENTITY;\n          _this.match = _this.matchWithTest;\n        } else {\n          _this.updateLastIndex = NOOP;\n          _this.match = _this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          _this.handleModes = NOOP;\n        }\n\n        if (_this.trackStartLines === false) {\n          _this.computeNewColumn = IDENTITY;\n        }\n\n        if (_this.trackEndLines === false) {\n          _this.updateTokenEndLineColumnLocation = NOOP;\n        }\n\n        if (/full/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createFullToken;\n        } else if (/onlyStart/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createOffsetOnlyToken;\n        } else {\n          throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n        }\n\n        if (_this.hasCustom) {\n          _this.addToken = _this.addTokenUsingPush;\n          _this.handlePayload = _this.handlePayloadWithCustom;\n        } else {\n          _this.addToken = _this.addTokenUsingMemberAccess;\n          _this.handlePayload = _this.handlePayloadNoCustom;\n        }\n      });\n\n      _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n        var unOptimizedModes = reduce(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n          if (canBeOptimized === false) {\n            cannotBeOptimized.push(modeName);\n          }\n\n          return cannotBeOptimized;\n        }, []);\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" + '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\\t Or inspect the console log for details on how to resolve these issues.\");\n        }\n      });\n\n      _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n        clearRegExpParserCache();\n      });\n\n      _this.TRACE_INIT(\"toFastProperties\", function () {\n        toFastProperties(_this);\n      });\n    });\n  }\n\n  Lexer.prototype.tokenize = function (text, initialMode) {\n    if (initialMode === void 0) {\n      initialMode = this.defaultMode;\n    }\n\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      var allErrMessages = map(this.lexerDefinitionErrors, function (error) {\n        return error.message;\n      });\n      var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n      throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n    }\n\n    var lexResult = this.tokenizeInternal(text, initialMode);\n    return lexResult;\n  }; // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n\n\n  Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n    var _this = this;\n\n    var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n    var orgText = text;\n    var orgLength = orgText.length;\n    var offset = 0;\n    var matchedTokensIndex = 0; // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n\n    var guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n    : Math.floor(text.length / 10);\n    var matchedTokens = new Array(guessedNumberOfTokens);\n    var errors = [];\n    var line = this.trackStartLines ? 1 : undefined;\n    var column = this.trackStartLines ? 1 : undefined;\n    var groups = cloneEmptyGroups(this.emptyGroups);\n    var trackLines = this.trackStartLines;\n    var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n    var currModePatternsLength = 0;\n    var patternIdxToConfig = [];\n    var currCharCodeToPatternIdxToConfig = [];\n    var modeStack = [];\n    var emptyArray = [];\n    Object.freeze(emptyArray);\n    var getPossiblePatterns = undefined;\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode) {\n      var optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    var pop_mode = function pop_mode(popToken) {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n      // So no error should occur.\n      popToken.tokenType.PUSH_MODE === undefined) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine !== undefined ? popToken.startLine : undefined,\n          column: popToken.startColumn !== undefined ? popToken.startColumn : undefined,\n          length: popToken.image.length,\n          message: msg_1\n        });\n      } else {\n        modeStack.pop();\n        var newMode = last(modeStack);\n        patternIdxToConfig = _this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(newMode) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n      currModePatternsLength = patternIdxToConfig.length;\n      var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    } // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n\n\n    push_mode.call(this, initialMode);\n    var currConfig;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n      var nextCharCode = orgText.charCodeAt(offset);\n      var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      var chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        var currPattern = currConfig.pattern;\n        payload = null; // manually in-lined because > 600 chars won't be in-lined in V8\n\n        var singleCharCode = currConfig.short;\n\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups);\n\n          if (match !== null) {\n            matchedImage = match[0];\n\n            if (match.payload !== undefined) {\n              payload = match.payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset);\n          matchedImage = this.match(currPattern, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAltIdx = currConfig.longerAlt;\n\n          if (longerAltIdx !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            var longerAltConfig = patternIdxToConfig[longerAltIdx];\n            var longerAltPattern = longerAltConfig.pattern;\n            altPayload = null; // single Char can never be a longer alt so no need to test it.\n            // manually in-lined because > 600 chars won't be in-lined in V8\n\n            if (longerAltConfig.isCustom === true) {\n              match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n\n              if (match !== null) {\n                matchAltImage = match[0];\n\n                if (match.payload !== undefined) {\n                  altPayload = match.payload;\n                }\n              } else {\n                matchAltImage = null;\n              }\n            } else {\n              this.updateLastIndex(longerAltPattern, offset);\n              matchAltImage = this.match(longerAltPattern, text, offset);\n            }\n\n            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n              matchedImage = matchAltImage;\n              payload = altPayload;\n              currConfig = longerAltConfig;\n            }\n          }\n\n          break;\n        }\n      } // successful match\n\n\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx; // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n\n          newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n          this.handlePayload(newToken, payload); // TODO: optimize NOOP in case there are no special groups?\n\n          if (group === false) {\n            matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength; // TODO: with newlines the column may be assigned twice\n\n        column = this.computeNewColumn(column, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          var numOfLTsInMatch = 0;\n          var foundTerminator = void 0;\n          var lastLTEndOffset = void 0;\n          lineTerminatorPattern.lastIndex = 0;\n\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset;\n            this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n          }\n        } // will be NOOP if no modes present\n\n\n        this.handleModes(currConfig, pop_mode, push_mode, newToken);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        var errorStartOffset = offset;\n        var errorLine = line;\n        var errorColumn = column;\n        var foundResyncPoint = false;\n\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset); // Identity Func (when sticky flag is enabled)\n\n          text = this.chopInput(text, 1);\n          offset++;\n\n          for (j = 0; j < currModePatternsLength; j++) {\n            var currConfig_1 = patternIdxToConfig[j];\n            var currPattern = currConfig_1.pattern; // manually in-lined because > 600 chars won't be in-lined in V8\n\n            var singleCharCode = currConfig_1.short;\n\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig_1.isCustom === true) {\n              foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n            } else {\n              this.updateLastIndex(currPattern, offset);\n              foundResyncPoint = currPattern.exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset; // at this point we either re-synced or reached the end of the input text\n\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        });\n      }\n    } // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n\n\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    };\n  };\n\n  Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      var pushMode = config.push;\n      pop_mode(newToken);\n\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  };\n\n  Lexer.prototype.chopInput = function (text, length) {\n    return text.substring(length);\n  };\n\n  Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n    regExp.lastIndex = newLastIndex;\n  }; // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n\n\n  Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n    var lastCharIsLT, fixForEndingInLT;\n\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT; // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      } // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n\n    }\n  };\n\n  Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n    return oldColumn + imageLength;\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.createTokenInstance = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      startLine: startLine,\n      startColumn: startColumn,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine: startLine,\n      endLine: startLine,\n      startColumn: startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n    return 666;\n  };\n\n  Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n    tokenVector.push(tokenToAdd);\n    return index;\n  };\n\n  Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }; // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.handlePayload = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  };\n  /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n\n\n  Lexer.prototype.match = function (pattern, text, offset) {\n    return null;\n  };\n\n  Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n    var found = pattern.test(text);\n\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.matchWithExec = function (pattern, text) {\n    var regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : regExpArray;\n  }; // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n\n\n  Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = timer(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer.NA = /NOT_APPLICABLE/;\n  return Lexer;\n}();\n\nexport { Lexer };","map":{"version":3,"mappings":"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","names":["analyzeTokenTypes","charCodeToOptimizedIndex","cloneEmptyGroups","DEFAULT_MODE","LineTerminatorOptimizedTester","performRuntimeChecks","performWarningRuntimeChecks","SUPPORT_STICKY","validatePatterns","cloneArr","cloneObj","forEach","IDENTITY","isArray","isEmpty","isUndefined","keys","last","map","merge","NOOP","PRINT_WARNING","reduce","reject","timer","toFastProperties","augmentTokenTypes","defaultLexerErrorProvider","clearRegExpParserCache","LexerDefinitionErrorType","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","ensureOptimizations","safeMode","errorMessageProvider","traceInitPerf","skipValidations","Object","freeze","lexerDefinition","config","undefined","Error","traceInitVal","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","actualDefinition","hasOnlySingleMode","_this","trackStartLines","test","trackEndLines","modes","lexerDefinitionErrors","concat","lexerDefinitionWarning","currModeValue","currModeName","currTokType","allModeNames","currModDef","currModName","push","currAnalyzeResult_1","tracer","bind","patternIdxToConfig","charCodeToPatternIdxToConfig","emptyGroups","hasCustom","canModeBeOptimized","canBeOptimized","defaultMode","allErrMessages","error","message","allErrMessagesString","join","warningDescriptor","chopInput","match","matchWithTest","updateLastIndex","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","Lexer","text","initialMode","lexResult","tokenizeInternal","i","j","matchAltImage","longerAltIdx","matchedImage","payload","altPayload","imageLength","group","tokType","newToken","errLength","droppedChar","msg","orgText","orgLength","length","offset","matchedTokensIndex","guessedNumberOfTokens","Math","floor","matchedTokens","Array","errors","line","column","groups","trackLines","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","charCode","optimizedCharIdx","possiblePatterns","pop_mode","popToken","tokenType","PUSH_MODE","msg_1","buildUnableToPopLexerModeMessage","startOffset","startLine","startColumn","image","pop","newMode","modeCanBeOptimized","push_mode","call","currConfig","nextCharCode","charCodeAt","chosenPatternIdxToConfig","chosenPatternsLength","currPattern","pattern","singleCharCode","short","isCustom","exec","longerAlt","longerAltConfig","longerAltPattern","tokenTypeIdx","canLineTerminator","numOfLTsInMatch","foundTerminator","lastLTEndOffset","lastIndex","errorStartOffset","errorLine","errorColumn","foundResyncPoint","currConfig_1","buildUnexpectedCharactersMessage","tokens","pushMode","substring","regExp","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","args","endOffset","tokenVector","index","tokenToAdd","token","found","regExpArray","phaseDesc","phaseImpl","indent","console","log","time","value","traceMethod","warn"],"sourceRoot":"","sources":["../../../src/scan/lexer_public.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}