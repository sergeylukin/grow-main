{"ast":null,"code":"import { compact, contains, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map } from \"../../utils/utils\";\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\";\nexport function defaultVisit(ctx, param) {\n  var childrenNames = keys(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n\n  return undefined;\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function derivedConstructor() {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function visit(cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function validateVisitor() {\n      var semanticDefinitionErrors = _validateVisitor(this, ruleNames);\n\n      if (!isEmpty(semanticDefinitionErrors)) {\n        var errorMessages = map(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\" + functionName(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function derivedConstructor() {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\n\nfunction _validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\n\nexport { _validateVisitor as validateVisitor };\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n  var errors = map(ruleNames, function (currRuleName) {\n    if (!isFunction(visitorInstance[currRuleName])) {\n      return {\n        msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor.\",\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    }\n  });\n  return compact(errors);\n}\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nexport function validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if (isFunction(visitorInstance[prop]) && !contains(VALID_PROP_NAMES, prop) && !contains(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\" + prop + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor\\n\" + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}","map":{"version":3,"mappings":"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","names":["compact","contains","forEach","isArray","isEmpty","isFunction","isUndefined","keys","map","defineNameProp","functionName","defaultVisit","ctx","param","childrenNames","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","name","children","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","errors","currRuleName","type","MISSING_METHOD","methodName","VALID_PROP_NAMES","prop","push","REDUNDANT_METHOD"],"sourceRoot":"","sources":["../../../../src/parse/cst/cst_visitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}