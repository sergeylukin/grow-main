{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { contains, every, has, some } from \"../../../utils/utils\";\nimport { AbstractProduction, Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"./gast_public\";\nimport { GAstVisitor } from \"./gast_visitor_public\";\nexport function isSequenceProd(prod) {\n  return prod instanceof Alternative || prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionMandatory || prod instanceof RepetitionMandatoryWithSeparator || prod instanceof RepetitionWithSeparator || prod instanceof Terminal || prod instanceof Rule;\n}\nexport function isOptionalProd(prod, alreadyVisited) {\n  if (alreadyVisited === void 0) {\n    alreadyVisited = [];\n  }\n\n  var isDirectlyOptional = prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator;\n\n  if (isDirectlyOptional) {\n    return true;\n  } // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n\n\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && contains(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n\n    return every(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else {\n    return false;\n  }\n}\nexport function isBranchingProd(prod) {\n  return prod instanceof Alternation;\n}\nexport function getProductionDslName(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nvar DslMethodsCollectorVisitor =\n/** @class */\nfunction (_super) {\n  __extends(DslMethodsCollectorVisitor, _super);\n\n  function DslMethodsCollectorVisitor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // A minus is never valid in an identifier name\n\n\n    _this.separator = \"-\";\n    _this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n    return _this;\n  }\n\n  DslMethodsCollectorVisitor.prototype.reset = function () {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {\n    var key = terminal.terminalType.name + this.separator + \"Terminal\";\n\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n\n    this.dslMethods[key].push(terminal);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {\n    var key = subrule.nonTerminalName + this.separator + \"Terminal\";\n\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n\n    this.dslMethods[key].push(subrule);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitOption = function (option) {\n    this.dslMethods.option.push(option);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {\n    this.dslMethods.repetition.push(many);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {\n    this.dslMethods.alternation.push(or);\n  };\n\n  return DslMethodsCollectorVisitor;\n}(GAstVisitor);\n\nexport { DslMethodsCollectorVisitor };\nvar collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule) {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  var dslMethods = collectorVisitor.dslMethods; // avoid uncleaned references\n\n  collectorVisitor.reset();\n  return dslMethods;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,sBAA3C;AACA,SACEC,kBADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,MALF,EAMEC,UANF,EAOEC,mBAPF,EAQEC,gCARF,EASEC,uBATF,EAUEC,IAVF,EAWEC,QAXF,QAYO,eAZP;AAaA,SAASC,WAAT,QAA4B,uBAA5B;AAGA,OAAM,SAAUC,cAAV,CAAyBC,IAAzB,EAA0C;AAC9C,SACEA,IAAI,YAAYX,WAAhB,IACAW,IAAI,YAAYT,MADhB,IAEAS,IAAI,YAAYR,UAFhB,IAGAQ,IAAI,YAAYP,mBAHhB,IAIAO,IAAI,YAAYN,gCAJhB,IAKAM,IAAI,YAAYL,uBALhB,IAMAK,IAAI,YAAYH,QANhB,IAOAG,IAAI,YAAYJ,IARlB;AAUD;AAED,OAAM,SAAUK,cAAV,CACJD,IADI,EAEJE,cAFI,EAE8B;AAAlC;AAAAA;AAAkC;;AAElC,MAAIC,kBAAkB,GACpBH,IAAI,YAAYT,MAAhB,IACAS,IAAI,YAAYR,UADhB,IAEAQ,IAAI,YAAYL,uBAHlB;;AAIA,MAAIQ,kBAAJ,EAAwB;AACtB,WAAO,IAAP;AACD,GARiC,CAUlC;AACA;AACA;;;AACA,MAAIH,IAAI,YAAYZ,WAApB,EAAiC;AAC/B;AACA,WAAOF,IAAI,CAAec,IAAK,CAACI,UAArB,EAAiC,UAACC,OAAD,EAAqB;AAC/D,aAAOJ,cAAc,CAACI,OAAD,EAAUH,cAAV,CAArB;AACD,KAFU,CAAX;AAGD,GALD,MAKO,IAAIF,IAAI,YAAYV,WAAhB,IAA+BP,QAAQ,CAACmB,cAAD,EAAiBF,IAAjB,CAA3C,EAAmE;AACxE;AACA,WAAO,KAAP;AACD,GAHM,MAGA,IAAIA,IAAI,YAAYb,kBAApB,EAAwC;AAC7C,QAAIa,IAAI,YAAYV,WAApB,EAAiC;AAC/BY,oBAAc,CAACI,IAAf,CAAoBN,IAApB;AACD;;AACD,WAAOhB,KAAK,CACWgB,IAAK,CAACI,UADjB,EAEV,UAACC,OAAD,EAAqB;AACnB,aAAOJ,cAAc,CAACI,OAAD,EAAUH,cAAV,CAArB;AACD,KAJS,CAAZ;AAMD,GAVM,MAUA;AACL,WAAO,KAAP;AACD;AACF;AAED,OAAM,SAAUK,eAAV,CAA0BP,IAA1B,EAA2C;AAC/C,SAAOA,IAAI,YAAYZ,WAAvB;AACD;AAED,OAAM,SAAUoB,oBAAV,CAA+BR,IAA/B,EAA8D;AAClE;AACA,MAAIA,IAAI,YAAYV,WAApB,EAAiC;AAC/B,WAAO,SAAP;AACD,GAFD,MAEO,IAAIU,IAAI,YAAYT,MAApB,EAA4B;AACjC,WAAO,QAAP;AACD,GAFM,MAEA,IAAIS,IAAI,YAAYZ,WAApB,EAAiC;AACtC,WAAO,IAAP;AACD,GAFM,MAEA,IAAIY,IAAI,YAAYP,mBAApB,EAAyC;AAC9C,WAAO,cAAP;AACD,GAFM,MAEA,IAAIO,IAAI,YAAYN,gCAApB,EAAsD;AAC3D,WAAO,kBAAP;AACD,GAFM,MAEA,IAAIM,IAAI,YAAYL,uBAApB,EAA6C;AAClD,WAAO,UAAP;AACD,GAFM,MAEA,IAAIK,IAAI,YAAYR,UAApB,EAAgC;AACrC,WAAO,MAAP;AACD,GAFM,MAEA,IAAIQ,IAAI,YAAYH,QAApB,EAA8B;AACnC,WAAO,SAAP;AACD,GAFM,MAEA;AACL,UAAMY,KAAK,CAAC,sBAAD,CAAX;AACD;AACF;;AAED;AAAA;AAAA;AAAgDC;;AAAhD;AAAA,0EACE;;;AACOC,sBAAY,GAAZ;AACAA,uBAAa;AAClBC,YAAM,EAAE,EADU;AAElBC,iBAAW,EAAE,EAFK;AAGlBC,gBAAU,EAAE,EAHM;AAIlBC,6BAAuB,EAAE,EAJP;AAKlBC,yBAAmB,EAAE,EALH;AAMlBC,sCAAgC,EAAE;AANhB,KAAb;;AA6DR;;AApDCC;AACE,SAAKC,UAAL,GAAkB;AAChBP,YAAM,EAAE,EADQ;AAEhBC,iBAAW,EAAE,EAFG;AAGhBC,gBAAU,EAAE,EAHI;AAIhBC,6BAAuB,EAAE,EAJT;AAKhBC,yBAAmB,EAAE,EALL;AAMhBC,sCAAgC,EAAE;AANlB,KAAlB;AAQD,GATD;;AAWOC,uDAAP,UAAqBE,QAArB,EAAuC;AACrC,QAAMC,GAAG,GAAGD,QAAQ,CAACE,YAAT,CAAsBC,IAAtB,GAA6B,KAAKC,SAAlC,GAA8C,UAA1D;;AACA,QAAI,CAACvC,GAAG,CAAC,KAAKkC,UAAN,EAAkBE,GAAlB,CAAR,EAAgC;AAC9B,WAAKF,UAAL,CAAgBE,GAAhB,IAAuB,EAAvB;AACD;;AACD,SAAKF,UAAL,CAAgBE,GAAhB,EAAqBf,IAArB,CAA0Bc,QAA1B;AACD,GANM;;AAQAF,0DAAP,UAAwBO,OAAxB,EAA4C;AAC1C,QAAMJ,GAAG,GAAGI,OAAO,CAACC,eAAR,GAA0B,KAAKF,SAA/B,GAA2C,UAAvD;;AACA,QAAI,CAACvC,GAAG,CAAC,KAAKkC,UAAN,EAAkBE,GAAlB,CAAR,EAAgC;AAC9B,WAAKF,UAAL,CAAgBE,GAAhB,IAAuB,EAAvB;AACD;;AACD,SAAKF,UAAL,CAAgBE,GAAhB,EAAqBf,IAArB,CAA0BmB,OAA1B;AACD,GANM;;AAQAP,qDAAP,UAAmBN,MAAnB,EAAiC;AAC/B,SAAKO,UAAL,CAAgBP,MAAhB,CAAuBN,IAAvB,CAA4BM,MAA5B;AACD,GAFM;;AAIAM,sEAAP,UAAoCS,OAApC,EAAoE;AAClE,SAAKR,UAAL,CAAgBJ,uBAAhB,CAAwCT,IAAxC,CAA6CqB,OAA7C;AACD,GAFM;;AAIAT,kEAAP,UAAgCU,UAAhC,EAA+D;AAC7D,SAAKT,UAAL,CAAgBH,mBAAhB,CAAoCV,IAApC,CAAyCsB,UAAzC;AACD,GAFM;;AAIAV,+EAAP,UACEW,aADF,EACiD;AAE/C,SAAKV,UAAL,CAAgBF,gCAAhB,CAAiDX,IAAjD,CAAsDuB,aAAtD;AACD,GAJM;;AAMAX,yDAAP,UAAuBY,IAAvB,EAAuC;AACrC,SAAKX,UAAL,CAAgBL,UAAhB,CAA2BR,IAA3B,CAAgCwB,IAAhC;AACD,GAFM;;AAIAZ,0DAAP,UAAwBa,EAAxB,EAAuC;AACrC,SAAKZ,UAAL,CAAgBN,WAAhB,CAA4BP,IAA5B,CAAiCyB,EAAjC;AACD,GAFM;;AAGT;AAhEA,EAAgDjC,WAAhD;;;AAkEA,IAAMkC,gBAAgB,GAAG,IAAId,0BAAJ,EAAzB;AACA,OAAM,SAAUe,cAAV,CACJC,IADI,EACM;AASVF,kBAAgB,CAACG,KAAjB;AACAD,MAAI,CAACE,MAAL,CAAYJ,gBAAZ;AACA,MAAMb,UAAU,GAAGa,gBAAgB,CAACb,UAApC,CAXU,CAYV;;AACAa,kBAAgB,CAACG,KAAjB;AACA,SAAYhB,UAAZ;AACD","names":["contains","every","has","some","AbstractProduction","Alternation","Alternative","NonTerminal","Option","Repetition","RepetitionMandatory","RepetitionMandatoryWithSeparator","RepetitionWithSeparator","Rule","Terminal","GAstVisitor","isSequenceProd","prod","isOptionalProd","alreadyVisited","isDirectlyOptional","definition","subProd","push","isBranchingProd","getProductionDslName","Error","__extends","_this","option","alternation","repetition","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","DslMethodsCollectorVisitor","dslMethods","terminal","key","terminalType","name","separator","subrule","nonTerminalName","manySep","atLeastOne","atLeastOneSep","many","or","collectorVisitor","collectMethods","rule","reset","accept"],"sourceRoot":"","sources":["../../../../../src/parse/grammar/gast/gast.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}